#!/bin/zsh

#
# See http://aperiodic.net/phil/prompt/
#     http://volnitsky.com/project/git-prompt/
#     http://github.com/sudish/dotfiles/blob/master/.zshinit/S90_git_status
#     http://www.jukie.net/~bart/conf/zsh.d/S55_git
#     http://repo.or.cz/w/git.git?a=blob_plain;f=contrib/completion/git-completion.bash;hb=master
#

uselib zgit

typeset -g -H -A rsboxvars

autoload colors zsh/terminfo
autoload -Uz vcs_info
zmodload zsh/datetime 2>/dev/null

rsboxvars[last_vcs_update]=$EPOCHSECONDS

rsboxvars[git_update_period]=${GIT_UPDATE_PERIOD:-30}
rsboxvars[git_scan_period]=${GIT_SCAN_PERIOD:-30}

rsboxvars[echotc_up]=$(echotc up)
rsboxvars[echotc_ce]=$(echotc ce)
rsboxvars[echotc_me]=$(echotc me)
rsboxvars[echotc_mr]=$(echotc mr)
rsboxvars[echotc_nd]=$(echotc nd)

function prompt_rsbox_vcsupdate {
    emulate -L zsh

    local arg="$1"

    local update=0 git_dir=

    # mark as cached pessimistically
    rsboxvars[vcs_fresh]="~"

    (( delta = EPOCHSECONDS - rsboxvars[last_vcs_update] ))

    if [ "$arg" = "-f" ]; then
        zctrace "ARG FORCED VCS UPDATE"
        update=1
    elif [ "$delta" -gt "$rsboxvars[git_update_period]" -o "$rsboxvars[git_update_period]" = 0 ]; then
        zctrace "TIME FORCED VCS UPDATE"
        update=1
    elif zgit_dir >/dev/null && git_dir=$REPLY; then
        if newer_than $rsboxvars[last_vcs_update] "$git_dir/HEAD" "$git_dir" \
                 "$git_dir/.." "$git_dir/refs" "$git_dir/rebase_merge" "$git_dir/rebase_apply" \
                 "$git_dir/.dotest" "$git_dir/BISECT_LOG" \
                 "$git_dir/.dotest-merge" "$git_dir/MERGE_HEAD"
        then
            zctrace "HEAD timestamp is newer!"
            update=1
        elif ! zgit_revision > /dev/null || [[ $REPLY != $rsboxvars[git_revision] ]]; then
            zctrace "Revision changed!"
            update=1
        elif [[ $history[$(($HISTCMD-1))] == git\ * ]]; then
            zctrace "last cmd was git"
            update=1
        fi
    fi &> /dev/null
    
    if [ "$update" = 1 ]; then
        zctrace "updating VCS..."
        rsboxvars[last_vcs_update]=$EPOCHSECONDS
        my_vcs_info
    fi

    update_rprompt_vcs
}

function my_vcs_info {
    emulate -L zsh
    setopt typeset_silent
    local output branch op dirty
    if zgit_in_p; then
      zctrace "doing git in zgit_in_p"
        zgit_branch > /dev/null   ; rsboxvars[git_branch]=$REPLY
        zgit_revision > /dev/null ; rsboxvars[git_revision]=$REPLY
        zgit_op > /dev/null       ; rsboxvars[git_op]=$REPLY
        zgit_status > /dev/null   ; rsboxvars[git_status]=$REPLY

        rsboxvars[git_dirty]=$(($status == 0 ? 0 : 1 ))

        [[ -n "$rsboxvars[git_op]" ]] && op="[$rsboxvars[git_op]]"
        [[ -n "$rsboxvars[git_status]" ]] && dirty=" $rsboxvars[git_status] "

        rsboxvars[git_prompt]="(${dirty}git${op} [${rsboxvars[git_branch]}])"
        vcs_info_msg_0_="$rsboxvars[git_prompt]"
        rsboxvars[vcs_fresh]=""
    else
        vcs_info_msg_0_=""
        rsboxvars[vcs_fresh]=""
    fi
    update_rprompt_vcs
}

function update_rprompt_vcs {
  if [[ -n $vcs_info_msg_0_ ]]; then
    rsboxvars[rprompt_vcs]="${vcs_info_msg_0_}${rsboxvars[vcs_fresh]}"
  else
    rsboxvars[rprompt_vcs]=""
  fi
    
}

function prompt_rsbox_chpwd {
    emulate -L zsh

    local update=0 in_git git_dir reason

    zgit_in_p
    in_git=$status 

    if [ $in_git != "$rsboxvars[in_git]" ]; then
        update=1
    fi

    if [ $in_git = 0 ]; then
        zgit_dir > /dev/null && git_dir=$REPLY
        # did we change repos?
        [[ "$git_dir" != "$rsboxvars[git_dir]" ]] && update=1

        # are we in the root of the working copy or git repo?
        #[[ $git_dir == $PWD || ${git_dir:h} == $PWD ]] && update=1

        rsboxvars[git_dir]="$git_dir"
    fi
    
    if [ $update = 1 ]; then
        zctrace "Running update in prompt_rsbox_chpwd"
        prompt_rsbox_vcsupdate -f 2>/dev/null
    fi
    rsboxvars[in_git]=$in_git
}


function prompt_rsbox_precmd {
    local exitstatus=$?
    emulate -L zsh
    
    zctrace "precmd...$*"
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    # handle a couple of conditions in which our preexec hook wouldn't run:
    #   syntax error, and empty input
    if [[ $rsboxvars[preexec_ran] == 0 ]]; then
        # we incremented history number but didn't run preexec? must be a syntax
        # error
        if [[ -n $rsboxvars[last_histcmd] && $rsboxvars[last_histcmd] != $HISTCMD ]]; then
          zlog "Syntax error detected in rsbox theme: $(fc -l -1)"
        else  
          # must be an empty cmd line; just clear and redraw prompt one line down
          prompt_rsbox_eraseprompt
          echo
        fi
    else
      prompt_rsbox_showexitstatus $exitstatus
    fi

    rsboxvars[last_histcmd]=$HISTCMD

    ###
    # Truncate the path if it's too long.
    
    rsboxvars[PR_FILLBAR]=""
    local PR_PWDLEN=""
    
    typeset -A -L altchar
    set -A altchar ${(s..)terminfo[acsc]}
    local PR_HBAR=${altchar[q]:--}
    
    local promptsize=${#${(%):---(%n@%m:%l${rsboxvars[PR_SHLVL]}%(1j.-%j.))---()--}}
    local pwdsize=${#${(%):-%~}}
    
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
	    (( PR_PWDLEN=$TERMWIDTH - $promptsize ))
    else
	    rsboxvars[PR_FILLBAR]="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi

    prompt_rsbox_vcsupdate 2>/dev/null

    rsboxvars[PR_APM]=''
    rsboxvars[PR_APM_RESULT]=''
    
    rsboxvars[preexec_ran]=0
}


function prompt_rsbox_eraseprompt () {
    emulate -L zsh

    local typed="$1"
    local i upcount

    local visible="${rsboxvars[LEFTPART]}${typed}"
    local visiblesize=""
    
    display_dimensions "$visible" > /dev/null && visiblesize=$REPLY
    
    (( upcount = 1 + ${visiblesize} ))

    local up=$rsboxvars[echotc_up] ce=$rsboxvars[echotc_ce] out=""
    if [ $upcount -lt $LINES ]; then
        for (( i=0; i < $upcount; i++ )); do
            out+="${up}${ce}"
        done
        echo -n -E "${out}${ce}"
    fi
}

function prompt_rsbox_showexitstatus () {
    emulate -L zsh
    local exitstatus=$1
    # echo "status is $exitstatus"
    [[ $exitstatus == 0 ]] && return
      
    local typed="$1"
    
    local string="[$exitstatus]"
    local visiblesize=$#string
    local col=$(( COLUMNS - $visiblesize ))
    local i
    
    # echotc ch $col

    local over=$rsboxvars[echotc_up]
    repeat $col; do
      over+=$rsboxvars[echotc_nd]
    done
    
    echo -E "${over}${rsboxvars[echotc_mr]}$fg[red]${string}${rsboxvars[echotc_me]}"
}


function prompt_rsbox_showhistoryline () {
    local histcmd="% $1"
    echo -E "${rsboxvars[echotc_mr]}${(r:$COLUMNS:: :)histcmd}${rsboxvars[echotc_me]}"
}

function prompt_rsbox_preexec () {
    emulate -L zsh

    local typed="$1" singleline="$2" fulltext="$3"
    
    zctrace "preexec..."
    
    if [[ "$TERM" == "screen" ]]; then
	  local CMD=${1[(wr)^(*=*|sudo|-*)]}
	  echo -n "\ek$CMD\e\\"
    fi

    prompt_rsbox_eraseprompt "$typed"
    prompt_rsbox_showhistoryline "$singleline"
    
    rsboxvars[preexec_ran]=1
}


function prompt_rsbox_setup() {
    ###
    # Need this so the prompt will work.
    setopt prompt_subst prompt_cr prompt_percent prompt_bang
    setopt extended_glob
    
    ###
    # See if we can use colors.

    if [[ "$terminfo[colors]" -ge 8 ]]; then
	  colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	  eval local PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	  eval local PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	  (( count = $count + 1 ))
    done
    local PR_NO_COLOUR="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
    
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    local PR_SET_CHARSET="%{$terminfo[enacs]%}"
    local PR_SHIFT_IN="%{$terminfo[smacs]%}"
    local PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    local PR_HBAR=${altchar[q]:--}
    local PR_ULCORNER=${altchar[l]:--}
    local PR_LLCORNER=${altchar[m]:--}
    local PR_LRCORNER=${altchar[j]:--}
    local PR_URCORNER=${altchar[k]:--}

    
    ###
    # Decide if we need to set titlebar text.
    
    local PR_TITLEBAR
    case $TERM in
	xterm*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	    ;;
	*)
	    PR_TITLEBAR=''
	    ;;
    esac
    
    
    ###
    # Decide whether to set a screen title
    local PR_STITLE
    if [[ "$TERM" == "screen" ]]; then
	  PR_STITLE=$'%{\ekzsh\e\\%}'
    else
	  PR_STITLE=''
    fi

    [[ $SHLVL > 1 ]] && rsboxvars[PR_SHLVL]=":$SHLVL"

    # 
    ###
    # Finally, the prompt.

    local RSBOXHOST=`hostname -s`

    rsboxvars[LEFTPART]="--(%(?..%?:)${(e)rsboxvars[PR_APM]}${RSBOXHOST}:%(!..)%#)-- "

    PROMPT="$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR\${(e)rsboxvars[PR_FILLBAR]}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_GREEN%(!.%SROOT%s.%n)$PR_GREEN@%m:%l\${rsboxvars[PR_SHLVL]}%(1j.-$PR_MAGENTA%j$PR_GREEN.)\
$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
${(e)rsboxvars[PR_APM]}$PR_YELLOW${RSBOXHOST}\
$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR "

    RPROMPT=" $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
\${rsboxvars[rprompt_vcs]}$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR"

    PS2="$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR "


    add-zsh-hook precmd prompt_rsbox_precmd
    add-zsh-hook preexec prompt_rsbox_preexec
    add-zsh-hook chpwd prompt_rsbox_chpwd
}

prompt_rsbox_setup