#!/bin/zsh

#
# See http://aperiodic.net/phil/prompt/
#

typeset -g -H -A rsboxvars

autoload colors zsh/terminfo
autoload -Uz vcs_info

zmodload zsh/datetime 2>/dev/null

rsboxvars[last_vcs_update]=$EPOCHSECONDS
# ZC_TRACE=1

function prompt_rsbox_vcsupdate {
    local arg="$1"

    if [ "$rsboxvars[updating]" = "1" ]; then
        echo "**** RECURSIVE VCSUPDATE ****"
        return
    fi
    
    rsboxvars[updating]=1
    
    local update=0
    local git_dir=$(zgit_dir)

    (( delta = EPOCHSECONDS - rsboxvars[last_vcs_update] ))
    
    
    if [ "$arg" = "-f" ]; then
        zctrace "ARG FORCED VCS UPDATE"
        update=1
    elif [ "$delta" -gt 120 ]; then
        zctrace "TIME FORCED VCS UPDATE"
        update=1
    elif zgit_in_p; then
        if [[ $(zstat +mtime "$git_dir/HEAD") -gt rsboxvars[last_vcs_update] ]]; then
            zctrace "HEAD timestamp is newer!"
            update=1
        elif [[ $(zgit_revision) != $rsboxvars[git_revision] ]]; then
            zctrace "Revision changed!"
            update=1
        elif [[ $(zstat +mtime "$git_dir") -gt rsboxvars[last_vcs_update] ]]; then
            zctrace ".git dir mtime changed!"
            update=1
        fi
    fi
    
    if [ "$update" = 1 ]; then
        zctrace "updating VCS..."
        rsboxvars[last_vcs_update]=$EPOCHSECONDS
        my_vcs_info
    fi

    rsboxvars[updating]=0
}

function my_vcs_info {
    emulate -L zsh
    local output branch
    if zgit_in_p; then
        rsboxvars[git_branch]=$(zgit_branch)
        rsboxvars[git_revision]=$(zgit_revision)
        vcs_info_msg_0_="(git [${rsboxvars[git_branch]}])"
    else
        vcs_info_msg_0_=""
    fi
}

function prompt_rsbox_chpwd {
    prompt_rsbox_vcsupdate -f
}


function prompt_rsbox_precmd {
    zctrace "precmd...$*"

    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    if [ "$rsboxvars[preexec_ran]" = "0" ]; then
        prompt_rsbox_eraseprompt
        echo
    fi

    ###
    # Truncate the path if it's too long.
    
    PR_FILLBAR=""
    local PR_PWDLEN=""
    
    typeset -A -L altchar
    set -A altchar ${(s..)terminfo[acsc]}
    local PR_HBAR=${altchar[q]:--}
    
    local promptsize=${#${(%):---(%n@%m:%l)---()--}}
    local pwdsize=${#${(%):-%~}}
    
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
	    (( PR_PWDLEN=$TERMWIDTH - $promptsize ))
    else
	    PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi

    prompt_rsbox_vcsupdate

    PR_APM=''
    PR_APM_RESULT=''
    
    rsboxvars[preexec_ran]=0
}


function prompt_rsbox_eraseprompt () {
    local typed="$1"
    local i upcount
    
    local visible="${rsboxvars[LEFTPART]}${typed}"
    local visiblesize=$(display_dimensions "$visible")
    
    (( upcount = 1 + ${visiblesize} ))
    
    if [ $upcount -lt $LINES ]; then
        for (( i=0; i < $upcount; i++ )); do
            echotc up
            echotc ce
        done
        echotc ce
    fi
}

function prompt_rsbox_showhistoryline () {
    local histcmd="% $1"
    echo "`echotc mr`${(r:$COLUMNS:: :)histcmd}`echotc me`"
}

function prompt_rsbox_preexec () {
    local typed="$1" singleline="$2" fulltext="$3"
    
    zctrace "preexec..."
    
    if [[ "$TERM" == "screen" ]]; then
	  local CMD=${1[(wr)^(*=*|sudo|-*)]}
	  echo -n "\ek$CMD\e\\"
    fi

    prompt_rsbox_eraseprompt "$typed"
    prompt_rsbox_showhistoryline "$singleline"
    
    rsboxvars[preexec_ran]=1
}


function old_box_prompt_info() {
  local CURRENT_BRANCH
  if [[ -d .git ]]; then
    local ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    local branch=${ref#refs/heads/}
    CURRENT_BRANCH="git:($PR_MAGENTA${branch}$PR_YELLOW)$PR_NO_COLOUR$(parse_git_dirty)"
  else
    CURRENT_BRANCH='%D{%a,%b%d}'
  fi

  echo $CURRENT_BRANCH
}


function box_prompt_info() {
  if [ -n "$vcs_info_msg_0_" ]; then
    # CURRENT_BRANCH="git:($PR_MAGENTA${branch}$PR_YELLOW)$PR_NO_COLOUR$(parse_git_dirty)"
    CURRENT_BRANCH="$vcs_info_msg_0_"
  else
    # CURRENT_BRANCH="($PR_YELLOW%D{%a,%b%d}$PR_BLUE)"
    CURRENT_BRANCH=""
  fi

  echo $CURRENT_BRANCH
}


function parse_git_dirty () {
  [[ $(git status | tail -n1) != "nothing to commit (working directory clean)" ]] && echo " %{$fg[yellow]%}x$PR_NO_COLOUR"
}

function prompt_rsbox_setup() {
    ###
    # Need this so the prompt will work.
    setopt prompt_subst prompt_cr prompt_percent prompt_bang
    setopt extended_glob
    
    ###
    # See if we can use colors.

    if [[ "$terminfo[colors]" -ge 8 ]]; then
	  colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	  eval local PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	  eval local PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	  (( count = $count + 1 ))
    done
    local PR_NO_COLOUR="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
    
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    local PR_SET_CHARSET="%{$terminfo[enacs]%}"
    local PR_SHIFT_IN="%{$terminfo[smacs]%}"
    local PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    local PR_HBAR=${altchar[q]:--}
    local PR_ULCORNER=${altchar[l]:--}
    local PR_LLCORNER=${altchar[m]:--}
    local PR_LRCORNER=${altchar[j]:--}
    local PR_URCORNER=${altchar[k]:--}

    
    ###
    # Decide if we need to set titlebar text.
    
    local PR_TITLEBAR
    case $TERM in
	xterm*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	    ;;
	*)
	    PR_TITLEBAR=''
	    ;;
    esac
    
    
    ###
    # Decide whether to set a screen title
    local PR_STITLE
    if [[ "$TERM" == "screen" ]]; then
	  PR_STITLE=$'%{\ekzsh\e\\%}'
    else
	  PR_STITLE=''
    fi

    # 
    ###
    # Finally, the prompt.

    local RSBOXHOST=`hostname -s`

    rsboxvars[LEFTPART]="--(%(?..%?:)${(e)PR_APM}${RSBOXHOST}:%(!..)%#)-- "

    PROMPT="$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR\${(e)PR_FILLBAR}$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
$PR_GREEN%(!.%SROOT%s.%n)$PR_GREEN@%m:%l\
$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\

$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
%(?..$PR_LIGHT_RED%?$PR_BLUE:)\
${(e)PR_APM}$PR_YELLOW${RSBOXHOST}\
$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR "

    RPROMPT=" $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_BLUE$PR_HBAR$PR_SHIFT_OUT\
\$(box_prompt_info)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR"

    PS2="$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR "


    add-zsh-hook precmd prompt_rsbox_precmd
    add-zsh-hook preexec prompt_rsbox_preexec
    add-zsh-hook chpwd prompt_rsbox_chpwd
}

prompt_rsbox_setup